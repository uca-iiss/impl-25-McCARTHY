pipeline {
    agent {
        docker {
            image 'python:3.12-slim'
            args '-v $HOME/.cache/pip:/root/.cache/pip'
        }
    }

    environment {
        PYTHONPATH = '.'
    }

    options {
        skipStagesAfterUnstable()
    }

    stages {
        stage('Instalar dependencias') {
            steps {
                sh 'pip install --no-cache-dir -r requirements.txt'
            }
        }

        stage('Compilar') {
            steps {
                sh 'python -m py_compile app/*.py'
            }
        }

        stage('Test') {
            steps {
                sh 'pytest --junit-xml=test-reports/results.xml'
            }
            post {
                always {
                    junit 'test-reports/results.xml'
                }
            }
        }

        stage('Empaquetar') {
            steps {
                sh 'pip install pyinstaller'
                sh 'pyinstaller --onefile app/main.py --name=procesador_logs'
            }
            post {
                success {
                    archiveArtifacts 'dist/procesador_logs'
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finalizado.'
        }
    }
}

